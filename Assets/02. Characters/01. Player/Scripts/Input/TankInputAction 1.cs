//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/02. Characters/01. Player/Scripts/Input/TankInputAction 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankInputAction1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankInputAction1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankInputAction 1"",
    ""maps"": [
        {
            ""name"": ""TankInputAction"",
            ""id"": ""0830cfc4-8a40-4ab2-bf1f-06fff4c92d85"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ef03e92f-5b78-4635-a49b-0671b7492d7d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""1cc70622-e590-45b3-9273-9488bcb4444b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""170878f7-28b1-457d-9276-05dab08c9495"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6ed1b2b0-3752-4d85-bf56-d86b0441d103"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraChange"",
                    ""type"": ""Button"",
                    ""id"": ""7b87748a-3a6a-4bae-b664-bc1d431ff737"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""39bdd877-ecd5-4844-b0ad-fb3369e5d1bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""05e5a074-eb26-4c10-8765-5fe8e75f0950"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""227a5822-156c-4f2c-94c3-025031f1f875"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e6a0ffe7-a84e-40d1-a468-fc4ed08d822a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8be717c5-b7d4-4eea-a6bf-c4d69cb423c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8df94284-a323-40cf-b55b-69348514522e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b341c222-9af7-401a-aaa1-f0abd54c6810"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b6fa36e-bf9d-4a61-a6c8-6ab59a5ca995"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfad7d73-1e3c-40db-8e1d-98553a3eebb6"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c31a0542-ce43-4e70-b0a0-079e1082eaaf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""CameraChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7be68aa5-1edb-4dc0-8203-a81a53d69bef"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""CameraChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4869b612-dd04-4ec8-9d4d-e0d6afb1d0e8"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""CameraChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5716d664-3437-46e3-9696-0c7851775c0a"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""CameraChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aefb7c7-daa4-4fff-b883-b9c9d99d239d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TankInputAction
        m_TankInputAction = asset.FindActionMap("TankInputAction", throwIfNotFound: true);
        m_TankInputAction_Movement = m_TankInputAction.FindAction("Movement", throwIfNotFound: true);
        m_TankInputAction_MouseLook = m_TankInputAction.FindAction("MouseLook", throwIfNotFound: true);
        m_TankInputAction_Fire = m_TankInputAction.FindAction("Fire", throwIfNotFound: true);
        m_TankInputAction_Zoom = m_TankInputAction.FindAction("Zoom", throwIfNotFound: true);
        m_TankInputAction_CameraChange = m_TankInputAction.FindAction("CameraChange", throwIfNotFound: true);
        m_TankInputAction_Escape = m_TankInputAction.FindAction("Escape", throwIfNotFound: true);
    }

    ~@TankInputAction1()
    {
        UnityEngine.Debug.Assert(!m_TankInputAction.enabled, "This will cause a leak and performance issues, TankInputAction1.TankInputAction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TankInputAction
    private readonly InputActionMap m_TankInputAction;
    private List<ITankInputActionActions> m_TankInputActionActionsCallbackInterfaces = new List<ITankInputActionActions>();
    private readonly InputAction m_TankInputAction_Movement;
    private readonly InputAction m_TankInputAction_MouseLook;
    private readonly InputAction m_TankInputAction_Fire;
    private readonly InputAction m_TankInputAction_Zoom;
    private readonly InputAction m_TankInputAction_CameraChange;
    private readonly InputAction m_TankInputAction_Escape;
    public struct TankInputActionActions
    {
        private @TankInputAction1 m_Wrapper;
        public TankInputActionActions(@TankInputAction1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_TankInputAction_Movement;
        public InputAction @MouseLook => m_Wrapper.m_TankInputAction_MouseLook;
        public InputAction @Fire => m_Wrapper.m_TankInputAction_Fire;
        public InputAction @Zoom => m_Wrapper.m_TankInputAction_Zoom;
        public InputAction @CameraChange => m_Wrapper.m_TankInputAction_CameraChange;
        public InputAction @Escape => m_Wrapper.m_TankInputAction_Escape;
        public InputActionMap Get() { return m_Wrapper.m_TankInputAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankInputActionActions set) { return set.Get(); }
        public void AddCallbacks(ITankInputActionActions instance)
        {
            if (instance == null || m_Wrapper.m_TankInputActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TankInputActionActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @CameraChange.started += instance.OnCameraChange;
            @CameraChange.performed += instance.OnCameraChange;
            @CameraChange.canceled += instance.OnCameraChange;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(ITankInputActionActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @CameraChange.started -= instance.OnCameraChange;
            @CameraChange.performed -= instance.OnCameraChange;
            @CameraChange.canceled -= instance.OnCameraChange;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(ITankInputActionActions instance)
        {
            if (m_Wrapper.m_TankInputActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITankInputActionActions instance)
        {
            foreach (var item in m_Wrapper.m_TankInputActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TankInputActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TankInputActionActions @TankInputAction => new TankInputActionActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface ITankInputActionActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnCameraChange(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
